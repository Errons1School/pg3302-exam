@startuml
class Program {
    - IsProgramRunning: bool
    + Main(args: String[]): void
}

class MainManager {
    - analyzerManager: AnalyzerManager
    - dbManager: IDbManager
    - analyzerResult: AnalyzerResult
    
    + Start(fileManager: FileManager): void
    + SaveFileInDb(): void
    + GenerateTxtFile(): void
    + RetrieveTitlesOfAnalysedTexts(): void
}

class Ui {
    ~ PrintMenu(): void
    ~ PrintSaveOrDiscard(): void
    ~ ProgressBar(): void
    ~ PrintBackToMainMenu(): void
}

'What?
class MenuHandler {
    + menuHanler(): void
}

class CreateNewFiles {
    ~ CreateTxtFiles(): void
}

class FileManager {
    - textFileArrayList: List<string>?
    - textFileName: List<string>?
    - selectedFile: int
    
    + GetText(filepath: string): Queue<string>
    ~ displayStoredFiles(): void
    + getSelectedFile(): string
    + retrieveAllFileNames(): string
}

class IOManager {
    + Input(text: string): string?
    + Write(text: string): void
    + ClearConsole(): void
}

class AnalyzerManager {
    + Result: AnalyzerResult
    - Threads: int
    - Text: Queue<string>
    - Word: string
    
    + AnalyzerManager(text: Queue<string>): analyzerManager
    + StartAnalyze(): AnalyzerResult
    - TotalWordCount(): void
    - TotalCharCount(): void
    - CheckLongestWord(): void
    - HeatMapWord(): void
    - HeatMapChar(): void
}

class AnalyzerResult {
    + SourceName: string
    + ScanTime: DateTime
    + TotalWordCount: Dictionary<string, int>
    + TotalCharCount: Dictionary<string, int>
    
    + ToString(): string
    - ToStringHeatMap(heatMap: Dictionary<string,int>): string
}

interface IDbManager {
    + SaveData(result: AnalyzerResult): void
    + GetScan(scanName: string, ScanTime: DateTime): List<AnalyzerResult>
    + GetAll(): List<AnalyzerResult>
    + GetWithSource(scanName: string): List<AnalyzerResult>
}

class SqliteDb {
    - dbConnection: SqliteConnection
    + SqliteDb(): SqliteDb
    + SqliteDb(path: string): SqliteDb
    - ConnectionSetup(path: string): void
    - TableSetup(connection: SqliteConnection): void
    - DeserializeScan(reader: SqliteDataReader): AnalyzerResult
}

Program --> MenuHandler
Program -> Ui
MenuHandler -> Ui
MenuHandler --> MainManager
MenuHandler --> CreateNewFiles
FileManager -> MenuHandler
CreateNewFiles --> IOManager
AnalyzerManager <- MainManager
MainManager --> IDbManager
IDbManager o-- SqliteDb
@enduml